<?php

namespace Cobalt\Templates;

use Cobalt\Templates\Exceptions\FileNotFound;

class Compiler {
    const VAR_STRING = "([!@#$]*[\w.\?\-\[\]$]+)(\(.*\))?";
    const VARIABLE_MATCH = "/[%\{]{2}" . self::VAR_STRING . "[\}%]{2}/i"; // Define the regex we're using to search for variables
    const FUNCTION_MATCH = "/@(\w+)\((.*?)\);?/";

    private string $path;

    function __construct() {
        
    }

    public function set_template($full_path) {
        if(!file_exists($full_path)) throw new FileNotFound("Path `$full_path` not found");
        $this->path = $full_path;
    }

    public function compile() {
        $content = file_get_contents($this->path);
        $now = date("c");
        $mutant = <<<HTML
        <?php
            /**
            * COBALT ENGINE COMPILED TEMPLATE
            * Compiled: $now
            *
            * WARNING: Do not edit this file directly! Any changes you make here
            *          WILL BE LOST when the originating template is updated.
            */
            global \$__current_template_debug;
            \$__current_template_debug = "$this->path";
        ?>$content
        HTML;
        $this->process_functions($content, $mutant);
        $this->process_variables($content, $mutant);
        return $mutant;
    }

    public function process_functions($subject, &$result) {
        $matches = [];
        preg_match_all(self::FUNCTION_MATCH, $subject, $matches);
        foreach($matches[0] as $i => $m) {
            $this->funct($m, $matches[1][$i], $matches[2][$i] ?? "", $subject, $result);
        }
    }

    public function funct($fullMatch, $name, $args, $subject, &$mutant) {
        $posStart = strpos($subject, $fullMatch);
        $posEnd = $posStart + strlen($fullMatch);
        // $args = substr($args, 1, -1);
        $string = <<<HTML
        <?= call_template_func("$name", $posStart, $posEnd, \$this->vars, $args) ?>
        HTML;
        $mutant = str_replace($fullMatch, $string, $mutant);
    }

    public function process_variables($subject, &$result) {
        $matches = [];
        preg_match_all(self::VARIABLE_MATCH, $subject, $matches);
        foreach($matches[0] as $i => $m) {
            $this->variable($m, $matches[1][$i], $matches[2][$i] ?? "", $subject, $result);
        }
    }

    public function variable($fullMatch, $name, $args, $subject, &$mutant) {
        $posStart = strpos($subject, $fullMatch);
        $posEnd = $posStart + strlen($fullMatch);
        if(!$args) $args = "null";
        else $args = "[".substr($args, 1, -1)."]";
        $string = <<<HTML
        <?= render('$name', $posStart, $posEnd, \$this->vars, $args) ?>
        HTML;
        $mutant = str_replace($fullMatch, $string, $mutant);
    }
}